{
    "scopeName": "source.abc",
    "patterns": [
        { "include": "#ties" },
        { "include": "#instructions" },
        { "include": "#comments" },
        { "include": "#voice" },
        { "include": "#annotations" },
        { "include": "#information" },
        { "include": "#bar"},
        { "include": "#chords" },
        { "include": "#symbols"},
        { "include": "#accidentalsAndOctaves" },
        { "include": "#referencenumber" },
        { "include": "#title"},
        { "include": "#key" },
        { "include": "#meter" },
        { "include": "#length" },
        { "include": "#tempo" },
        { "include": "#composer" },
        { "include": "#rhythm" }
    ],
    "repository": {
        "title": {
            "patterns": [                
                {
                    "match": "^(T:)(.*)",
                    "captures": {
                        "1": { "name": "keyword.other.title.abc" },
                        "2": { "name": "string.value.title.abc" }
                    }
                }
            ]
        },
        "key": {
            "patterns": [                
                {
                    "match": "^(K:)(.*)",
                    "captures": {
                        "1": { "name": "keyword.other.key.abc" },
                        "2": { "name": "string.value.key.abc" }
                    }
                }
            ]
        },
        "meter": {
            "patterns": [                
                {
                    "match": "^(M:)(.*)",
                    "captures": {
                        "1": { "name": "keyword.other.meter.abc" },
                        "2": { "name": "string.value.meter.abc" }
                    }
                }
            ]
        },
        "length": {
            "patterns": [                
                {
                    "match": "^(L:)(.*)",
                    "captures": {
                        "1": { "name": "keyword.other.length.abc" },
                        "2": { "name": "string.value.length.abc" }
                    }
                }
            ]
        },
        "part": {
            "patterns": [                
                {
                    "match": "^(P:)(.*)",
                    "captures": {
                        "1": { "name": "keyword.other.part.abc" },
                        "2": { "name": "string.value.part.abc" }
                    }
                }
            ]
        },
        "tempo": {
            "patterns": [                
                {
                    "match": "^(Q:)(.*)",
                    "captures": {
                        "1": { "name": "keyword.other.tempo.abc" },
                        "2": { "name": "string.value.tempo.abc" }
                    }
                }
            ]
        },
        "referencenumber": {
            "patterns": [                
                {
                    "match": "^(X:)(.*)",
                    "captures": {
                        "1": { "name": "keyword.other.referencenumber.abc" },
                        "2": { "name": "string.value.referencenumber.abc" }
                    }
                }
            ]
        },
        "composer": {
            "patterns": [                
                {
                    "match": "^(C:)(.*)",
                    "captures": {
                        "1": { "name": "keyword.other.composer.abc" },
                        "2": { "name": "string.value.composer.abc" }
                    }
                }
            ]
        },
        "instructions": {
            "patterns": [                
                {
                    "match": "^%%.*",
                    "name": "comment"
                }
            ]
        },
        "annotations": {
            "patterns": [
                {
                    "match": "\"([^\".]*)\"",
                    "name": "comment"
                }
            ]
        },
        "comments": {
            "patterns": [                
                {
                    "match": "^%.*",
                    "name": "comment.line.abc"
                }
            ]
        },
        "accidentalsAndOctaves": {
            "patterns": [
                {
                    "match": "[\\^_=,']",
                    "name": "string"
                }
            ]
        },
        "chords": {
            "patterns": [                
                {
                        "match": "[\\[\\]]",
                    "name": "keyword.other"
                }
            ]
        },
        "words": {
            "patterns": [                
                {
                    "match": "^(w:)(.*)",
                    "name": "keyword.other.words.abc"
                }
            ]
        },
        "bar": {
            "patterns": [                
                {
                    "match": ":?\\|[:\\]]?",
                    "name": "keyword.other.bar.abc"
                }
            ]
        },
        "ornaments": {
            "patterns": [                
                {
                    "match": "\\!([^\\!.]*)\\!",
                    "name": "keyword.other.ornaments.abc"
                }
            ]
        },
        "symbols": {
            "patterns": [
                {
                    "match": "!([^!.]*)!",
                    "name": "keyword.other.symbols.abc"
                }
            ]
        },
        "ties": {
            "patterns": [
                {
                    "match": "\\(",
                    "name": "string"
                },
                {
                    "match": "\\)",
                    "name": "string"
                }
            ]
        },
        "voice": {
            "patterns": [
                {
                    "match": "^\\[V:.\\]",
                    "name": "comment"
                }
            ]
        },
        "rhythm":{
            "patterns": [
                {
                    "match": "[><]",
                    "name": "string"
                },
                {
                    "match": "(?!^[a-gzA-GZ]([,']?)+)[\/0-9]+",
                    "name": "string"
                }
            ]
        } 
    }
}